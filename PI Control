
#include <LiquidCrystal.h>

int sensor = A0; //Setting the pin for the Sensor
int incButton = 2;
int decButton = 3;
int actuator = 6; // Select the pin for the LED
int PV = 0; // the process variable which is also the LDR Value
int setPoint = 0; // Potentiometer value now we can call it SP
int CO = 0; // Control output value
int Error = 0; // declare variable to store the error
int button1 = 4;
int button2 = 5;
int displayIndex = 0; 
float pGain = 0.1; // Declare the Proportional Gain variable
float iGain = 0.1; // Declare the Integral Gain Variable
int integralAction; //Declare the integral action value
unsigned long previousMillis = 0; // Declare variable
const long interval = 100; // Declare te interval in which the arduino will perfrom the control of the loop
unsigned long currentMillis; // Declare the variable to store the current millis value 

LiquidCrystal lcd(12, 11, 10, 9, 8, 7);

void setup() {
  // put your setup code here, to run once:
  pinMode(actuator, OUTPUT);
  pinMode(incButton, INPUT_PULLUP);
  pinMode(decButton, INPUT_PULLUP);
  pinMode(button1, INPUT_PULLUP);
  pinMode(button2, INPUT_PULLUP);
  Serial.begin(9600);
  lcd.begin(16, 2);

}

void loop() {
  // put your main code here, to run repeatedly:
  PV = analogRead(sensor); //read the value from the sensor the value will be between 0-1024
  currentMillis = millis(); // Reading the Current millis Value

  if (currentMillis - previousMillis >= interval){
    previousMillis = currentMillis;
    Error = setPoint-PV; // Error is SP - PV
    integralAction = (integralAction + Error); // The integral is the Accumulation of the Error
    CO = (pGain *Error) + (iGain*integralAction); // The Controller output is P control + I control

    if (CO>255){
      CO = 255; // Putting Cap on the max value to not exceed 255
    }

    if (CO<0) {
      CO = 0; // Putting Cap on the min Value not to be less than 0
    }
    analogWrite(actuator, CO); // writing the CO to the actuator

      if (digitalRead(incButton) == LOW) {
    if (displayIndex == 0) setPoint += 10;
    else if (displayIndex == 1) CO = 255;
    else if (displayIndex == 2) PV += 10;
    else if (displayIndex == 3) Error += 10;
    else if (displayIndex == 4) pGain += 0.1;
    else if (displayIndex == 5) iGain += 0.1;
    delay(200);
  } else if (digitalRead(decButton) == LOW) {
    if (displayIndex == 0) setPoint -= 10;
    else if (displayIndex == 1) CO = 0;
    else if (displayIndex == 2) PV -= 10;
    else if (displayIndex == 3) Error -= 10;
    else if (displayIndex == 4) pGain -= 0.1;
     else if (displayIndex == 5) iGain -= 0.1;
    delay(200);
  }
  
  if (digitalRead(button1) == LOW) {
    displayIndex++;
    if (displayIndex > 5) displayIndex = 0;
    delay(200);
  }
  
  if (digitalRead(button2) == LOW) {
    displayIndex--;
    if (displayIndex < 0) displayIndex = 5;
    delay(200);
  }
  
  switch (displayIndex) {
    case 0:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("SP= ");
      lcd.print(setPoint);
      break;
    case 1:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("CO= ");
      lcd.print(CO);
      break;
    case 2:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("PV= ");
      lcd.print(PV);
      break;
    case 3:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Error= ");
      lcd.print(Error);
      break;
    case 4:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("PGain= ");
      lcd.print(pGain);
      break;
      case 5:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("IGain= ");
      lcd.print(iGain);
      break;
  }

    Serial.print("SP = "); 
Serial.print(setPoint);
Serial.print("\t CO = ");
Serial.print(CO);
Serial.print("\t PV = ");
Serial.print(PV);
Serial.print("\t P Gain = ");
Serial.print(pGain);
Serial.print("\t I Gain = ");
Serial.print(iGain);
Serial.println();
  }

}
